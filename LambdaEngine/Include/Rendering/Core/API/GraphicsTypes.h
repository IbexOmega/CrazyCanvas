#pragma once
#include "LambdaEngine.h"

#include <vector>

namespace LambdaEngine
{
    enum class EMemoryType : uint8
    {
        NONE				= 0,
        MEMORY_CPU_VISIBLE  = 1,
        MEMORY_GPU			= 2,
    };

    enum class EFormat : uint8
    {
        NONE					= 0,
        FORMAT_R8G8B8A8_UNORM	= 1,
        FORMAT_B8G8R8A8_UNORM	= 2,
    };

	enum class EShaderType : uint32
	{
		NONE				= 0,
		MESH_SHADER			= BIT(0),
		VERTEX_SHADER		= BIT(1),
		GEOMETRY_SHADER		= BIT(2),
		HULL_SHADER			= BIT(3),
		DOMAIN_SHADER		= BIT(4),
		PIXEL_SHADER		= BIT(5),
		COMPUTE_SHADER		= BIT(6),
		RAYGEN_SHADER		= BIT(7),
		INTERSECT_SHADER	= BIT(8),
		ANY_HIT_SHADER		= BIT(9),
		CLOSEST_HIT_SHADER	= BIT(10),
		MISS_SHADER			= BIT(11),
	};

	enum class ECommandQueueType : uint8
	{
		COMMAND_QUEUE_UNKNOWN	= 0,
		COMMAND_QUEUE_NONE		= 1,
		COMMAND_QUEUE_COMPUTE	= 2,
		COMMAND_QUEUE_GRAPHICS	= 3,
		COMMAND_QUEUE_COPY		= 4,
	};

	enum class ECommandListType : uint8
	{
		COMMANDLIST_UNKNOWN		= 0,
		COMMANDLIST_PRIMARY		= 1,
		COMMANDLIST_SECONDARY	= 2
	};

	enum class EShaderLang : uint32
	{
		NONE	= 0,
		SPIRV	= BIT(0),
	};

	enum class ELoadOp : uint8
	{
		NONE		= 0,
		LOAD		= 1,
		CLEAR		= 2,
		DONT_CARE	= 3,
	};

	enum class EStoreOp : uint8
	{
		NONE		= 0,
		STORE		= 1,
		DONT_CARE	= 2,
	};

	enum class EFilter : uint8
	{
		NONE		= 0,
		NEAREST		= 1,
		LINEAR		= 2,
	};

	enum class EMipmapMode : uint8
	{
		NONE		= 0,
		NEAREST		= 1,
		LINEAR		= 2,
	};

	enum class EAddressMode : uint8
	{
		NONE					= 0,
		REPEAT					= 1,
		MIRRORED_REPEAT			= 2,
		CLAMP_TO_EDGE			= 3,
		CLAMP_TO_BORDER			= 4,
		MIRRORED_CLAMP_TO_EDGE	= 5,
	};

	enum FTextureFlags : uint32
	{
		TEXTURE_FLAG_NONE				= 0,
		TEXTURE_FLAG_RENDER_TARGET		= FLAG(1),
		TEXTURE_FLAG_SHADER_RESOURCE	= FLAG(2),
		TEXTURE_FLAG_UNORDERED_ACCESS	= FLAG(3),
		TEXTURE_FLAG_DEPTH_STENCIL		= FLAG(4),
		TEXTURE_FLAG_COPY_SRC			= FLAG(5),
		TEXTURE_FLAG_COPY_DST			= FLAG(6),
	};

	enum FPipelineStageFlags : uint32
	{
		PIPELINE_STAGE_FLAG_UNKNOWN							= 0,
		PIPELINE_STAGE_FLAG_TOP								= FLAG(1),
		PIPELINE_STAGE_FLAG_BOTTOM							= FLAG(2),
		PIPELINE_STAGE_FLAG_DRAW_INDIRECT					= FLAG(3),
		PIPELINE_STAGE_FLAG_VERTEX_INPUT					= FLAG(4),
		PIPELINE_STAGE_FLAG_VERTEX_SHADER					= FLAG(5),
		PIPELINE_STAGE_FLAG_HULL_SHADER						= FLAG(6),
		PIPELINE_STAGE_FLAG_DOMAIN_SHADER					= FLAG(7),
		PIPELINE_STAGE_FLAG_GEOMETRY_SHADER					= FLAG(8),
		PIPELINE_STAGE_FLAG_PIXEL_SHADER					= FLAG(9),
		PIPELINE_STAGE_FLAG_EARLY_FRAGMENT_TESTS			= FLAG(10),
		PIPELINE_STAGE_FLAG_LATE_FRAGMENT_TESTS				= FLAG(11),
		PIPELINE_STAGE_FLAG_RENDER_TARGET_OUTPUT			= FLAG(12),
		PIPELINE_STAGE_FLAG_COMPUTE_SHADER					= FLAG(13),
		PIPELINE_STAGE_FLAG_COPY							= FLAG(14),
		PIPELINE_STAGE_FLAG_HOST							= FLAG(15),
		PIPELINE_STAGE_FLAG_STREAM_OUTPUT					= FLAG(16),
		PIPELINE_STAGE_FLAG_CONDITIONAL_RENDERING			= FLAG(17),
		PIPELINE_STAGE_FLAG_RAY_TRACING_SHADER				= FLAG(18),
		PIPELINE_STAGE_FLAG_ACCELERATION_STRUCTURE_BUILD	= FLAG(19),
		PIPELINE_STAGE_FLAG_SHADING_RATE_TEXTURE			= FLAG(20),
		PIPELINE_STAGE_FLAG_TASK_SHADER						= FLAG(21),
		PIPELINE_STAGE_FLAG_MESH_SHADER						= FLAG(22),
	};

	enum FAccessFlags : uint32
	{
		ACCESS_FLAG_UNKNOWN								= 0,
		ACCESS_FLAG_INDIRECT_COMMAND_READ				= FLAG(1),
		ACCESS_FLAG_INDEX_READ							= FLAG(2),
		ACCESS_FLAG_VERTEX_ATTRIBUTE_READ				= FLAG(3),
		ACCESS_FLAG_UNIFORM_READ						= FLAG(4),
		ACCESS_FLAG_INPUT_ATTACHMENT_READ				= FLAG(5),
		ACCESS_FLAG_SHADER_READ							= FLAG(6),
		ACCESS_FLAG_SHADER_WRITE						= FLAG(7),
		ACCESS_FLAG_COLOR_ATTACHMENT_READ				= FLAG(8),
		ACCESS_FLAG_COLOR_ATTACHMENT_WRITE				= FLAG(9),
		ACCESS_FLAG_DEPTH_STENCIL_ATTACHMENT_READ		= FLAG(10),
		ACCESS_FLAG_DEPTH_STENCIL_ATTACHMENT_WRITE		= FLAG(11),
		ACCESS_FLAG_TRANSFER_READ						= FLAG(12),
		ACCESS_FLAG_TRANSFER_WRITE						= FLAG(13),
		ACCESS_FLAG_HOST_READ							= FLAG(14),
		ACCESS_FLAG_HOST_WRITE							= FLAG(15),
		ACCESS_FLAG_MEMORY_READ							= FLAG(16),
		ACCESS_FLAG_MEMORY_WRITE						= FLAG(17),
		ACCESS_FLAG_TRANSFORM_FEEDBACK_WRITE			= FLAG(18),
		ACCESS_FLAG_TRANSFORM_FEEDBACK_COUNTER_READ		= FLAG(19),
		ACCESS_FLAG_TRANSFORM_FEEDBACK_COUNTER_WRITE	= FLAG(20),
		ACCESS_FLAG_CONDITIONAL_RENDERING_READ			= FLAG(21),
		ACCESS_FLAG_COLOR_ATTACHMENT_READ_NONCOHERENT	= FLAG(22),
		ACCESS_FLAG_ACCELERATION_STRUCTURE_READ			= FLAG(23),
		ACCESS_FLAG_ACCELERATION_STRUCTURE_WRITE		= FLAG(24),
		ACCESS_FLAG_SHADING_RATE_IMAGE_READ				= FLAG(25),
		ACCESS_FLAG_FRAGMENT_DENSITY_MAP_READ			= FLAG(26),
		ACCESS_FLAG_COMMAND_PREPROCESS_READ				= FLAG(27),
		ACCESS_FLAG_COMMAND_PREPROCESS_WRITE			= FLAG(28),
	};

	enum class ETextureState : uint32
	{
		TEXTURE_STATE_UNKNOWN								= 0,
		TEXTURE_STATE_DONT_CARE								= 1,
		TEXTURE_STATE_GENERAL								= 2,
		TEXTURE_STATE_COLOR_ATTACHMENT						= 3,
		TEXTURE_STATE_DEPTH_STENCIL_ATTACHMENT				= 4,
		TEXTURE_STATE_DEPTH_STENCIL_READ_ONLY				= 5,
		TEXTURE_STATE_SHADER_READ_ONLY						= 6,
		TEXTURE_STATE_COPY_SRC								= 7,
		TEXTURE_STATE_COPY_DST								= 8,
		TEXTURE_STATE_PREINITIALIZED						= 9,
		TEXTURE_STATE_DEPTH_READ_ONLY_STENCIL_ATTACHMENT	= 10,
		TEXTURE_STATE_DEPTH_ATTACHMENT_STENCIL_READ_ONLY	= 11,
		TEXTURE_STATE_DEPTH_ATTACHMENT						= 12,
		TEXTURE_STATE_DEPTH_READ_ONLY						= 13,
		TEXTURE_STATE_STENCIL_ATTACHMENT					= 14,
		TEXTURE_STATE_STENCIL_READ_ONLY						= 15,
		TEXTURE_STATE_PRESENT								= 16,
		TEXTURE_STATE_SHADING_RATE							= 17,
	};

	union ShaderConstant
	{
		byte	Data[4];
		float	Float;
		int32	Integer;
	};

	struct ShaderDesc
	{
		const char* pSource		= nullptr;
		uint32		SourceSize	= 0;
		const char* pEntryPoint = "main";
		EShaderType Type		= EShaderType::NONE;
		EShaderLang Lang		= EShaderLang::NONE;
		
		std::vector<ShaderConstant> Constants;
	};

	struct Viewport
	{
		float MinDepth	= 0.0f;
		float MaxDepth	= 0.0f;
		float Width		= 0.0f;
		float Height	= 0.0f;
		float x		    = 0.0f;
		float y		    = 0.0f;
	};

	struct ScissorRect
	{
		uint32 Width	= 0;
		uint32 Height	= 0;
		int32 x		    = 0;
		int32 y		    = 0;
	};
}
