#pragma once
#include "LambdaEngine.h"

namespace LambdaEngine
{
    enum class EMemoryType : uint8
    {
		MEMORY_TYPE_NONE		= 0,
        MEMORY_TYPE_CPU_VISIBLE = 1,
        MEMORY_TYPE_GPU			= 2,
    };

    enum class EFormat : uint8
    {
		FORMAT_NONE						= 0,
        FORMAT_R8G8B8A8_UNORM			= 1,
        FORMAT_B8G8R8A8_UNORM			= 2,
        FORMAT_R8G8B8A8_SNORM			= 3,
        FORMAT_R16G16B16A16_SFLOAT		= 4,
		FORMAT_D24_UNORM_S8_UINT		= 5
    };

	enum class ECommandQueueType : uint8
	{
		COMMAND_QUEUE_TYPE_UNKNOWN	= 0,
		COMMAND_QUEUE_TYPE_NONE		= 1,
		COMMAND_QUEUE_TYPE_COMPUTE	= 2,
		COMMAND_QUEUE_TYPE_GRAPHICS	= 3,
		COMMAND_QUEUE_TYPE_COPY		= 4,
	};

	enum class ECommandListType : uint8
	{
		COMMAND_LIST_TYPE_UNKNOWN		= 0,
		COMMAND_LIST_TYPE_PRIMARY		= 1,
		COMMAND_LIST_TYPE_SECONDARY		= 2
	};

	enum class EPrimitiveTopology : uint16
	{
		PRIMITIVE_TOPOLOGY_NONE				= 0,
		PRIMITIVE_TOPOLOGY_TRIANGLE_LIST	= 1,
	};

	enum class EPolygonMode : uint8
	{
		POLYGON_MODE_NONE	= 0,
		POLYGON_MODE_FILL	= 1,
		POLYGON_MODE_LINE	= 2,
		POLYGON_MODE_POINT	= 3
	};

	enum class ECullMode : uint8
	{
		CULL_MODE_NONE	= 0,
		CULL_MODE_BACK	= 1,
		CULL_MODE_FRONT	= 2,
	};

	enum class EShaderLang : uint32
	{
		SHADER_LANG_NONE	= 0,
		SHADER_LANG_SPIRV	= 1,
		SHADER_LANG_GLSL	= 2,
	};

	enum class ELoadOp : uint8
	{
		LOAD_OP_NONE		= 0,
		LOAD_OP_LOAD		= 1,
		LOAD_OP_CLEAR		= 2,
		LOAD_OP_DONT_CARE	= 3,
	};

	enum class EStoreOp : uint8
	{
		STORE_OP_NONE		= 0,
		STORE_OP_STORE		= 1,
		STORE_OP_DONT_CARE	= 2,
	};

	enum class EFilterType : uint8
	{
		FILTER_TYPE_NONE		= 0,
		FILTER_TYPE_NEAREST		= 1,
		FILTER_TYPE_LINEAR		= 2,
	};

	enum class EMipmapMode : uint8
	{
		MIPMAP_MODE_NONE		= 0,
		MIPMAP_MODE_NEAREST		= 1,
		MIPMAP_MODE_LINEAR		= 2,
	};

	enum class ESamplerAddressMode : uint8
	{
		SAMPLER_ADDRESS_MODE_NONE					= 0,
		SAMPLER_ADDRESS_MODE_REPEAT					= 1,
		SAMPLER_ADDRESS_MODE_MIRRORED_REPEAT		= 2,
		SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE			= 3,
		SAMPLER_ADDRESS_MODE_CLAMP_TO_BORDER		= 4,
		SAMPLER_ADDRESS_MODE_MIRRORED_CLAMP_TO_EDGE	= 5,
	};

	enum class ETextureState : uint32
	{
		TEXTURE_STATE_UNKNOWN								= 0,
		TEXTURE_STATE_DONT_CARE								= 1,
		TEXTURE_STATE_GENERAL								= 2,
		TEXTURE_STATE_RENDER_TARGET							= 3,
		TEXTURE_STATE_DEPTH_STENCIL_ATTACHMENT				= 4,
		TEXTURE_STATE_DEPTH_STENCIL_READ_ONLY				= 5,
		TEXTURE_STATE_SHADER_READ_ONLY						= 6,
		TEXTURE_STATE_COPY_SRC								= 7,
		TEXTURE_STATE_COPY_DST								= 8,
		TEXTURE_STATE_PREINITIALIZED						= 9,
		TEXTURE_STATE_DEPTH_READ_ONLY_STENCIL_ATTACHMENT	= 10,
		TEXTURE_STATE_DEPTH_ATTACHMENT_STENCIL_READ_ONLY	= 11,
		TEXTURE_STATE_DEPTH_ATTACHMENT						= 12,
		TEXTURE_STATE_DEPTH_READ_ONLY						= 13,
		TEXTURE_STATE_STENCIL_ATTACHMENT					= 14,
		TEXTURE_STATE_STENCIL_READ_ONLY						= 15,
		TEXTURE_STATE_PRESENT								= 16,
		TEXTURE_STATE_SHADING_RATE							= 17,
	};

	enum class EDescriptorType : uint32
	{
		DESCRIPTOR_TYPE_UNKNOWN								= 0,
		DESCRIPTOR_TYPE_SHADER_RESOURCE_TEXTURE				= 1,
		DESCRIPTOR_TYPE_SHADER_RESOURCE_COMBINED_SAMPLER	= 3,
		DESCRIPTOR_TYPE_UNORDERED_ACCESS_TEXTURE			= 2,
		DESCRIPTOR_TYPE_CONSTANT_BUFFER						= 4,
		DESCRIPTOR_TYPE_UNORDERED_ACCESS_BUFFER				= 5,
		DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE				= 6,
		DESCRIPTOR_TYPE_SAMPLER								= 7,
	};

	enum class EQueryType : uint8
	{
		QUERY_TYPE_NONE					= 0,
		QUERY_TYPE_TIMESTAMP			= 1,
		QUERY_TYPE_OCCLUSION			= 2,
		QUERY_TYPE_PIPELINE_STATISTICS	= 3,
	};

	enum class EBlendOp : uint8
	{
		BLEND_OP_NONE		= 0,
		BLEND_OP_ADD		= 1,
		BLEND_OP_SUB		= 2,
		BLEND_OP_REV_SUB	= 3,
		BLEND_OP_MIN		= 4,
		BLEND_OP_MAX		= 5,
	};

	enum class ELogicOp : int8
	{
		LOGIC_OP_NONE			= 0,
		LOGIC_OP_CLEAR			= 1,
		LOGIC_OP_AND			= 2,
		LOGIC_OP_AND_REVERSE	= 3,
		LOGIC_OP_COPY			= 4,
		LOGIC_OP_AND_INVERTED	= 5,
		LOGIC_OP_NO_OP			= 6,
		LOGIC_OP_XOR			= 7,
		LOGIC_OP_OR				= 8,
		LOGIC_OP_NOR			= 9,
		LOGIC_OP_EQUIVALENT		= 10,
		LOGIC_OP_INVERT			= 11,
		LOGIC_OP_OR_REVERSE		= 12,
		LOGIC_OP_COPY_INVERTED	= 13,
		LOGIC_OP_OR_INVERTED	= 14,
		LOGIC_OP_NAND			= 15,
		LOGIC_OP_SET			= 16,
	};

	enum class EBlendFactor : uint8
	{
		BLEND_FACTOR_NONE				= 0,
		BLEND_FACTOR_ZERO				= 1,
		BLEND_FACTOR_ONE				= 2,
		BLEND_FACTOR_SRC_COLOR			= 3,
		BLEND_FACTOR_INV_SRC_COLOR		= 4,
		BLEND_FACTOR_DST_COLOR			= 5,
		BLEND_FACTOR_INV_DST_COLOR		= 6,
		BLEND_FACTOR_SRC_ALPHA			= 7,
		BLEND_FACTOR_INV_SRC_ALPHA		= 8,
		BLEND_FACTOR_DST_ALPHA			= 9,
		BLEND_FACTOR_INV_DST_ALPHA		= 10,
		BLEND_FACTOR_CONSTANT_COLOR		= 11,
		BLEND_FACTOR_INV_CONSTANT_COLOR	= 12,
		BLEND_FACTOR_CONSTANT_ALPHA		= 13,
		BLEND_FACTOR_INV_CONSTANT_ALPHA	= 14,
		BLEND_FACTOR_SRC_ALPHA_SATURATE	= 15,
		BLEND_FACTOR_SRC1_COLOR			= 16,
		BLEND_FACTOR_INV_SRC1_COLOR		= 17,
		BLEND_FACTOR_SRC1_ALPHA			= 18,
		BLEND_FACTOR_INV_SRC1_ALPHA		= 19,
	};

	enum FShaderStageFlags : uint32
	{
		SHADER_STAGE_FLAG_NONE					= 0,
		SHADER_STAGE_FLAG_MESH_SHADER			= FLAG(0),
		SHADER_STAGE_FLAG_TASK_SHADER			= FLAG(1),
		SHADER_STAGE_FLAG_VERTEX_SHADER			= FLAG(2),
		SHADER_STAGE_FLAG_GEOMETRY_SHADER		= FLAG(3),
		SHADER_STAGE_FLAG_HULL_SHADER			= FLAG(4),
		SHADER_STAGE_FLAG_DOMAIN_SHADER			= FLAG(5),
		SHADER_STAGE_FLAG_PIXEL_SHADER			= FLAG(6),
		SHADER_STAGE_FLAG_COMPUTE_SHADER		= FLAG(7),
		SHADER_STAGE_FLAG_RAYGEN_SHADER			= FLAG(8),
		SHADER_STAGE_FLAG_INTERSECT_SHADER		= FLAG(9),
		SHADER_STAGE_FLAG_ANY_HIT_SHADER		= FLAG(10),
		SHADER_STAGE_FLAG_CLOSEST_HIT_SHADER	= FLAG(11),
		SHADER_STAGE_FLAG_MISS_SHADER			= FLAG(12),
	};

	enum FTextureFlags : uint16
	{
		TEXTURE_FLAG_NONE				= 0,
		TEXTURE_FLAG_RENDER_TARGET		= FLAG(1),
		TEXTURE_FLAG_SHADER_RESOURCE	= FLAG(2),
		TEXTURE_FLAG_UNORDERED_ACCESS	= FLAG(3),
		TEXTURE_FLAG_DEPTH_STENCIL		= FLAG(4),
		TEXTURE_FLAG_COPY_SRC			= FLAG(5),
		TEXTURE_FLAG_COPY_DST			= FLAG(6),
	};

	enum FPipelineStageFlags : uint32
	{
		PIPELINE_STAGE_FLAG_UNKNOWN							= 0,
		PIPELINE_STAGE_FLAG_TOP								= FLAG(1),
		PIPELINE_STAGE_FLAG_BOTTOM							= FLAG(2),
		PIPELINE_STAGE_FLAG_DRAW_INDIRECT					= FLAG(3),
		PIPELINE_STAGE_FLAG_VERTEX_INPUT					= FLAG(4),
		PIPELINE_STAGE_FLAG_VERTEX_SHADER					= FLAG(5),
		PIPELINE_STAGE_FLAG_HULL_SHADER						= FLAG(6),
		PIPELINE_STAGE_FLAG_DOMAIN_SHADER					= FLAG(7),
		PIPELINE_STAGE_FLAG_GEOMETRY_SHADER					= FLAG(8),
		PIPELINE_STAGE_FLAG_PIXEL_SHADER					= FLAG(9),
		PIPELINE_STAGE_FLAG_EARLY_FRAGMENT_TESTS			= FLAG(10),
		PIPELINE_STAGE_FLAG_LATE_FRAGMENT_TESTS				= FLAG(11),
		PIPELINE_STAGE_FLAG_RENDER_TARGET_OUTPUT			= FLAG(12),
		PIPELINE_STAGE_FLAG_COMPUTE_SHADER					= FLAG(13),
		PIPELINE_STAGE_FLAG_COPY							= FLAG(14),
		PIPELINE_STAGE_FLAG_HOST							= FLAG(15),
		PIPELINE_STAGE_FLAG_STREAM_OUTPUT					= FLAG(16),
		PIPELINE_STAGE_FLAG_CONDITIONAL_RENDERING			= FLAG(17),
		PIPELINE_STAGE_FLAG_RAY_TRACING_SHADER				= FLAG(18),
		PIPELINE_STAGE_FLAG_ACCELERATION_STRUCTURE_BUILD	= FLAG(19),
		PIPELINE_STAGE_FLAG_SHADING_RATE_TEXTURE			= FLAG(20),
		PIPELINE_STAGE_FLAG_TASK_SHADER						= FLAG(21),
		PIPELINE_STAGE_FLAG_MESH_SHADER						= FLAG(22),
	};

	enum FMemoryAccessFlags : uint32
	{
		MEMORY_ACCESS_FLAG_UNKNOWN								= 0,
		MEMORY_ACCESS_FLAG_INDIRECT_COMMAND_READ				= FLAG(1),
		MEMORY_ACCESS_FLAG_INDEX_READ							= FLAG(2),
		MEMORY_ACCESS_FLAG_VERTEX_ATTRIBUTE_READ				= FLAG(3),
		MEMORY_ACCESS_FLAG_CONSTANT_BUFFER_READ					= FLAG(4),
		MEMORY_ACCESS_FLAG_INPUT_ATTACHMENT_READ				= FLAG(5),
		MEMORY_ACCESS_FLAG_SHADER_READ							= FLAG(6),
		MEMORY_ACCESS_FLAG_SHADER_WRITE							= FLAG(7),
		MEMORY_ACCESS_FLAG_COLOR_ATTACHMENT_READ				= FLAG(8),
		MEMORY_ACCESS_FLAG_COLOR_ATTACHMENT_WRITE				= FLAG(9),
		MEMORY_ACCESS_FLAG_DEPTH_STENCIL_ATTACHMENT_READ		= FLAG(10),
		MEMORY_ACCESS_FLAG_DEPTH_STENCIL_ATTACHMENT_WRITE		= FLAG(11),
		MEMORY_ACCESS_FLAG_TRANSFER_READ						= FLAG(12),
		MEMORY_ACCESS_FLAG_TRANSFER_WRITE						= FLAG(13),
		MEMORY_ACCESS_FLAG_HOST_READ							= FLAG(14),
		MEMORY_ACCESS_FLAG_HOST_WRITE							= FLAG(15),
		MEMORY_ACCESS_FLAG_MEMORY_READ							= FLAG(16),
		MEMORY_ACCESS_FLAG_MEMORY_WRITE							= FLAG(17),
		MEMORY_ACCESS_FLAG_TRANSFORM_FEEDBACK_WRITE				= FLAG(18),
		MEMORY_ACCESS_FLAG_TRANSFORM_FEEDBACK_COUNTER_READ		= FLAG(19),
		MEMORY_ACCESS_FLAG_TRANSFORM_FEEDBACK_COUNTER_WRITE		= FLAG(20),
		MEMORY_ACCESS_FLAG_CONDITIONAL_RENDERING_READ			= FLAG(21),
		MEMORY_ACCESS_FLAG_COLOR_ATTACHMENT_READ_NONCOHERENT	= FLAG(22),
		MEMORY_ACCESS_FLAG_ACCELERATION_STRUCTURE_READ			= FLAG(23),
		MEMORY_ACCESS_FLAG_ACCELERATION_STRUCTURE_WRITE			= FLAG(24),
		MEMORY_ACCESS_FLAG_SHADING_RATE_IMAGE_READ				= FLAG(25),
		MEMORY_ACCESS_FLAG_FRAGMENT_DENSITY_MAP_READ			= FLAG(26),
		MEMORY_ACCESS_FLAG_COMMAND_PREPROCESS_READ				= FLAG(27),
		MEMORY_ACCESS_FLAG_COMMAND_PREPROCESS_WRITE				= FLAG(28),
	};

	enum FColorComponentFlags : uint8
	{
		COLOR_COMPONENT_FLAG_NONE	= 0,
		COLOR_COMPONENT_FLAG_R		= FLAG(1),
		COLOR_COMPONENT_FLAG_G		= FLAG(2),
		COLOR_COMPONENT_FLAG_B		= FLAG(3),
		COLOR_COMPONENT_FLAG_A		= FLAG(4),
	};

	enum FAccelerationStructureFlags : uint16
	{
		ACCELERATION_STRUCTURE_FLAG_NONE			= 0,
		ACCELERATION_STRUCTURE_FLAG_ALLOW_UPDATE	= FLAG(1),
	};

	enum FQueryPipelineStatisticsFlag : uint32
	{
		QUERY_PIPELINE_STATISTICS_FLAG_NONE											= 0,
		QUERY_PIPELINE_STATISTICS_FLAG_INPUT_ASSEMBLY_VERTICES						= FLAG(1),
		QUERY_PIPELINE_STATISTICS_FLAG_INPUT_ASSEMBLY_PRIMITIVES					= FLAG(2),
		QUERY_PIPELINE_STATISTICS_FLAG_VERTEX_SHADER_INVOCATIONS					= FLAG(3),
		QUERY_PIPELINE_STATISTICS_FLAG_GEOMETRY_SHADER_INVOCATIONS					= FLAG(4),
		QUERY_PIPELINE_STATISTICS_FLAG_GEOMETRY_SHADER_PRIMITIVES					= FLAG(5),
		QUERY_PIPELINE_STATISTICS_FLAG_CLIPPING_INVOCATIONS							= FLAG(6),
		QUERY_PIPELINE_STATISTICS_FLAG_CLIPPING_PRIMITIVES							= FLAG(7),
		QUERY_PIPELINE_STATISTICS_FLAG_FRAGMENT_SHADER_INVOCATIONS					= FLAG(8),
		QUERY_PIPELINE_STATISTICS_FLAG_TESSELLATION_CONTROL_SHADER_PATCHES			= FLAG(9),
		QUERY_PIPELINE_STATISTICS_FLAG_TESSELLATION_EVALUATION_SHADER_INVOCATIONS	= FLAG(10),
		QUERY_PIPELINE_STATISTICS_FLAG_COMPUTE_SHADER_INVOCATIONS					= FLAG(11),
	};

	struct DescriptorCountDesc
	{
		uint32 DescriptorSetCount						= 0;
		uint32 SamplerDescriptorCount					= 0;
		uint32 TextureDescriptorCount					= 0;
		uint32 TextureCombinedSamplerDescriptorCount	= 0;
		uint32 ConstantBufferDescriptorCount			= 0;
		uint32 UnorderedAccessBufferDescriptorCount		= 0;
		uint32 UnorderedAccessTextureDescriptorCount	= 0;
		uint32 AccelerationStructureDescriptorCount		= 0;
	};

	struct Viewport
	{
		float MinDepth	= 0.0f;
		float MaxDepth	= 0.0f;
		float Width		= 0.0f;
		float Height	= 0.0f;
		float x		    = 0.0f;
		float y		    = 0.0f;
	};

	struct ScissorRect
	{
		uint32 Width	= 0;
		uint32 Height	= 0;
		int32 x		    = 0;
		int32 y		    = 0;
	};
}
