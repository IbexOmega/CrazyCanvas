#version 460
#extension GL_ARB_separate_shader_objects : enable
#extension GL_GOOGLE_include_directive : enable
#extension GL_NV_mesh_shader : require

#include "../Defines.glsl"

// Number of threads
layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;
layout(triangles, max_vertices = 64, max_primitives = 126) out;

// Output block for vertices
layout(location = 0) out flat uint	out_MaterialSlot[];
layout(location = 1) out vec3		out_WorldPosition[];
layout(location = 2) out vec3		out_Normal[];
layout(location = 3) out vec3		out_Tangent[];
layout(location = 4) out vec3		out_Bitangent[];
layout(location = 5) out vec2		out_TexCoord[];
layout(location = 6) out vec4		out_ClipPosition[];
layout(location = 7) out vec4		out_PrevClipPosition[];
layout(location = 8) out vec4		out_Color[];

// Constant data
const vec3 POSITIONS[3] = 
{
	vec3(-1.0f, 1.0f, 0.0f),
	vec3( 0.0f, -1.0f, 0.0f),
	vec3( 1.0f, 1.0f, 0.0f),
};

// Uniforms
layout(binding = 0, set = BUFFER_SET_INDEX) uniform PerFrameBuffer
{
	SPerFrameBuffer Val;
} u_PerFrameBuffer;

// Vertex data
layout(binding = 0, set = DRAW_SET_INDEX) restrict readonly buffer Vertices
{ 
	SVertex Val[]; 
} b_Vertices;

layout(binding = 1, set = DRAW_SET_INDEX) restrict readonly buffer Instances
{ 
	SInstance Val[]; 
} b_Instances;

layout(binding = 2, set = DRAW_SET_INDEX) restrict readonly buffer Meshlets
{ 
	SMeshlet Val[];
} b_Meshlets;

layout(binding = 3, set = DRAW_SET_INDEX) restrict readonly buffer UniqueIndices
{ 
	uint Val[];
} b_UniqueIndices;

layout(binding = 4, set = DRAW_SET_INDEX) restrict readonly buffer PrimitiveIndices
{ 
	uint Val[];
} b_PrimitiveIndices;

// Color table for drawing each meshlet with a different color.
//
#define MAX_COLORS 10
vec3 meshletcolors[MAX_COLORS] = 
{
	vec3(1.0f, 0.0f, 0.0f), 
	vec3(0.0f, 1.0f, 0.0f),
	vec3(0.0f, 0.0f, 1.0f),
	vec3(1.0f, 1.0f, 0.0f),
	vec3(1.0f, 0.0f, 1.0f),
	vec3(0.0f, 1.0f, 1.0f),
	vec3(1.0f, 0.5f, 0.0f),
	vec3(0.5f, 1.0f, 0.0f),
	vec3(0.0f, 0.5f, 1.0f),
	vec3(1.0f, 1.0f, 1.0f)
};

/*
* Main
*/
void main()
{
	// Calculate meshletID and instanceID
	uint totalMeshletID	= gl_WorkGroupID.x;
	uint meshletCount	= b_Instances.Val[0].MeshletCount; // Just use 0 since all instances have the same meshlet count
	uint meshletID		= totalMeshletID % meshletCount;
	uint instanceID		= totalMeshletID / meshletCount;

	// Get data
	SMeshlet	meshlet		= b_Meshlets.Val[meshletID];
	SInstance	instance	= b_Instances.Val[instanceID];
	mat4 projection	= u_PerFrameBuffer.Val.Projection;
	mat4 view		= u_PerFrameBuffer.Val.View;
	mat4 transform	= instance.Transform;
	
	// Per vertex
	vec4 color = vec4(meshletcolors[meshletID % MAX_COLORS], 1.0f);
	for (uint vert = 0; vert < meshlet.VertCount; vert++)
	{
		uint vertexIndex = b_UniqueIndices.Val[vert + meshlet.VertOffset];
		SVertex vertex = b_Vertices.Val[vertexIndex];

		vec4 worldPosition	= transform * vec4(vertex.Position.xyz, 1.0f);
		vec3 normal			= (transform * vec4(vertex.Normal.xyz, 0.0f)).xyz;
		vec3 tangent		= (transform * vec4(vertex.Tangent.xyz, 0.0f)).xyz;
		vec2 texcoord		= vertex.TexCoord.xy;

		// Material
		out_WorldPosition[vert]	= worldPosition.xyz;
		out_MaterialSlot[vert]	= instance.MaterialSlot;
		out_Normal[vert]		= normalize(normal);
		out_Tangent[vert]		= normalize(tangent);
		out_Bitangent[vert]		= normalize(cross(tangent, normal));
		out_TexCoord[vert]		= texcoord;
		
		vec4 clipPosition = projection * view * worldPosition;
		out_ClipPosition[vert]		= clipPosition;
		out_PrevClipPosition[vert]	= clipPosition;

		out_Color[vert] = color;

		// Position
		gl_MeshVerticesNV[vert].gl_Position = clipPosition;
	}

	// Per Index
	uint indexCount = meshlet.PrimCount * 3;
	uint indexOffset = meshlet.PrimOffset * 3;
	for (uint index = 0; index < indexCount; index++)
	{
		uint primitiveIndex = b_PrimitiveIndices.Val[index + indexOffset];
		gl_PrimitiveIndicesNV[index] = primitiveIndex;
	}

	// Number of triangles
	gl_PrimitiveCountNV = meshlet.PrimCount;
}