#version 460
#extension GL_ARB_separate_shader_objects : enable
#extension GL_GOOGLE_include_directive : enable
#extension GL_NV_mesh_shader : require

#include "../Defines.glsl"

// Number of threads
layout(local_size_x = 3, local_size_y = 1, local_size_z = 1) in;
layout(triangles, max_vertices = 64, max_primitives = 126) out;

// Output block for vertices
layout(location = 0) out flat uint	out_MaterialSlot[];
layout(location = 1) out vec3		out_Normal[];
layout(location = 2) out vec3		out_Tangent[];
layout(location = 3) out vec3		out_Bitangent[];
layout(location = 4) out vec2		out_TexCoord[];
layout(location = 5) out vec4		out_ClipPosition[];
layout(location = 6) out vec4		out_PrevClipPosition[];

// Constant data
const vec3 POSITIONS[3] = 
{
	vec3(-1.0f, 1.0f, 0.0f),
	vec3( 0.0f, -1.0f, 0.0f),
	vec3( 1.0f, 1.0f, 0.0f),
};

// Uniforms
layout(binding = 0, set = BUFFER_SET_INDEX) uniform PerFrameBuffer
{
	SPerFrameBuffer Val;
} u_PerFrameBuffer;

// Vertex data
layout(binding = 0, set = DRAW_SET_INDEX) restrict readonly buffer Vertices
{ 
	SVertex val[]; 
} b_Vertices;

layout(binding = 1, set = DRAW_SET_INDEX) restrict readonly buffer Instances
{ 
	SInstance val[]; 
} b_Instances;

/*
* Main
*/
void main()
{
	uint threadID	= gl_LocalInvocationID.x;
	mat4 projection	= u_PerFrameBuffer.Val.Projection;
	mat4 view		= u_PerFrameBuffer.Val.View;
	
	const vec3 normal	= vec3(0.0f, 0.0f, 1.0f);
	const vec3 tangent	= vec3(1.0f, 0.0f, 0.0f);

	// Per vertex
	vec4 worldPosition = vec4(POSITIONS[threadID], 1.0f);

	// Material
	out_MaterialSlot[threadID]	= 0;
	out_Normal[threadID]		= normalize(normal);
	out_Tangent[threadID]		= normalize(tangent);
	out_Bitangent[threadID]		= normalize(cross(tangent, normal));
	out_TexCoord[threadID]		= vec2(worldPosition.x + 1.0f, worldPosition.y + 1.0f) / vec2(2.0f);
		
	vec4 clipPosition = projection * view * worldPosition;
	out_ClipPosition[threadID]		= clipPosition;
	out_PrevClipPosition[threadID]	= clipPosition;

	// Position
	gl_MeshVerticesNV[threadID].gl_Position = clipPosition;

	// Triangle indices
	gl_PrimitiveIndicesNV[threadID] = threadID;
	
	// Number of triangles
	gl_PrimitiveCountNV = 1;
}