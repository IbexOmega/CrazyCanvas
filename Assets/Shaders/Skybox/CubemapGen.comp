#version 460
#extension GL_GOOGLE_include_directive : enable

layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

// Pushconstants
layout(push_constant) uniform PushConstants
{
	uint Size;
} u_PC;

// Textures
layout(binding = 0, set = 0) uniform sampler2D u_Panorama;

layout(binding = 1, set = 0, rgba16f) restrict writeonly uniform imageCube	u_CubeMap;

// Constants
const vec2 INV_ATAN = vec2(0.1591f, 0.3183f);

// Transform from dispatch ID to cubemap face direction
const mat3 ROTATE_UV[6] = 
{
	// +X
	mat3(  0,  0, -1,
		   0, -1,  0,
		   1,  0,  0),
	// -X
	mat3(  0,  0,  1,
		   0, -1,  0,
		  -1,  0,  0),
	// +Y
	mat3(  1,  0,  0,
		   0,  0,  1,
		   0,  1,  0),
	// -Y
	mat3(  1,  0,  0,
		   0,  0, -1,
		   0, -1,  0),
	// +Z
	mat3(  1,  0,  0,
		   0, -1,  0,
		   0,  0,  1),
	// -Z
	mat3( -1,  0,  0,
		   0, -1,  0,
		   0,  0, -1)
};

void main()
{
	vec2 texCoord	= vec2(gl_GlobalInvocationID.xy);
	if (texCoord.x > u_PC.Size || texCoord.y > u_PC.Size)
	{
		return;
	}

	int face = int(gl_GlobalInvocationID.z);

	// Map the UV coords of the cubemap face to a direction
	// [(0, 0), (1, 1)] => [(-0.5, -0.5), (0.5, 0.5)]
	vec3 direction	= normalize(vec3((texCoord.xy / float(u_PC.Size)) - 0.5f, 0.5f));
	direction		= normalize(ROTATE_UV[face] * direction);

	// Convert the world space direction into U,V texture coordinates in the panorama texture.
	// Source: http://gl.ict.usc.edu/Data/HighResProbes/
	vec2 panoramaTexCoords = (vec2(atan(direction.z, direction.x), acos(direction.y)) * INV_ATAN);
	vec4 color = texture(u_Panorama, panoramaTexCoords);
	// color.rgb = color.rgb * COLOR[face];
	imageStore(u_CubeMap, ivec3(texCoord, face), color);
}