#version 460
#extension GL_GOOGLE_include_directive : enable

#include "../Helpers.glsl"

layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

// Pushconstants
layout(push_constant) uniform PushConstants
{
	uint Size;
} u_PC;

// Textures
layout(binding = 0, set = 0, rg16f) restrict writeonly uniform image2D u_IntegrationLUT;

vec2 IntegrateBRDF(float dotNV, float roughness)
{ 
	vec3 V;
	V.x = sqrt(1.0f - (dotNV * dotNV));
	V.y = 0.0f;
	V.z = dotNV;

	float A = 0.0f;
	float B = 0.0f;

	vec3 N = vec3(0.0f, 0.0f, 1.0f);

	const uint SAMPLE_COUNT = 1024u;
	for (uint s = 0u; s < SAMPLE_COUNT; s++)
	{
		vec2 Xi	= Hammersley(s, SAMPLE_COUNT);
		vec3 H	= ImportanceSampleGGX(Xi, N, roughness);
		vec3 L	= normalize(2.0f * dot(V, H) * H - V);

		float dotNL = max(L.z, 0.0f);
		float dotNH = max(H.z, 0.0f);
		float dotVH = max(dot(V, H), 0.0f);

		if (dotNL > 0.0f)
		{
			float G		= GeometryIBL(N, V, L, roughness);
			float G_Vis	= (G * dotVH) / (dotNH * dotNV);
			float Fc	= pow(1.0f - dotVH, 5.0f);

			A += (1.0f - Fc) * G_Vis;
			B += Fc * G_Vis;
		}
	}
	
	return vec2(A, B) / SAMPLE_COUNT;
}

void main()
{
	ivec2 invocationID = ivec2(gl_GlobalInvocationID.xy);
	vec2 texCoord	= (vec2(invocationID) + 0.5f) / vec2(u_PC.Size);
	float dotNV		= max(texCoord.x, 0.0f);
	float roughness	= min(max(1.0f - texCoord.y, 0.0f), 1.0f);
	
	vec2 integratedBDRF = IntegrateBRDF(dotNV, roughness);
	imageStore(u_IntegrationLUT, invocationID, vec4(integratedBDRF, 0.0f, 0.0f));
}