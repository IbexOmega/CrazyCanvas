#version 460
#extension GL_GOOGLE_include_directive : enable

#include "CubemapHelper.glsl"
#include "../Helpers.glsl"

layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

// Pushconstants
layout(push_constant) uniform PushConstants
{
	uint	EnvironmenMapSize;
	uint	CubeMapSize;
	float	Roughness;
} u_PC;

// Textures
layout(binding = 0, set = 0) uniform samplerCube u_EnvironmentMap;
layout(binding = 1, set = 0, rgba16f) restrict writeonly uniform imageCube	u_CubeMap;

void main()
{
	vec2 texCoord	= vec2(gl_GlobalInvocationID.xy);
	if (texCoord.x > u_PC.CubeMapSize || texCoord.y > u_PC.CubeMapSize)
	{
		return;
	}

	int face = int(gl_GlobalInvocationID.z);

	// Map the UV coords of the cubemap face to a direction
	// [(0, 0), (1, 1)] => [(-0.5, -0.5), (0.5, 0.5)]
	vec3 normal	= normalize(vec3((texCoord.xy / float(u_PC.CubeMapSize)) - 0.5f, 0.5f));
	normal		= normalize(ROTATE_UV[face] * normal);
	
	// Make the assumption that V equals R equals the normal 
	vec3 R = normal;
	vec3 V = R;

	float roughness		= min(max(u_PC.Roughness, 0.001f), 1.0f);
	float totalWeight	= 0.0f;
	vec3 prefilteredColor = vec3(0.0f, 0.0f, 0.0f);
	
	const uint SAMPLE_COUNT = 512U;
	for (uint i = 0U; i < SAMPLE_COUNT; i++)
	{
		// Generates a sample vector that's biased towards the preferred alignment normal (importance sampling).
		vec2 Xi	= Hammersley(i, SAMPLE_COUNT);
		vec3 H	= ImportanceSampleGGX(Xi, normal, roughness);
		vec3 L	= normalize(2.0 * dot(V, H) * H - V);

		float dotNL = max(dot(normal, L), 0.0f);
		if (dotNL > 0.0f)
		{
			// Sample from the environment's mip level based on roughness/pdf
			float D		= Distribution(normal, H, roughness);
			float dotNH	= max(dot(normal, H), 0.0f);
			float dotHV	= max(dot(H, V), 0.0f);
			float PDF	= D * dotNH / (4.0f * dotHV) + 0.0001f;

			float resolution	= float(u_PC.EnvironmenMapSize); // resolution of source cubemap (per face)
			float saTexel		= 4.0f * PI / (6.0f * resolution * resolution);
			float saSample		= 1.0f / (float(SAMPLE_COUNT) * PDF + 0.0001f);

			const float miplevel = roughness == 0.0f ? 0.0f : 0.5f * log2(saSample / saTexel);
			prefilteredColor += textureLod(u_EnvironmentMap, L, miplevel).rgb * dotNL;
			totalWeight += dotNL;
		}
	}

	prefilteredColor = prefilteredColor / totalWeight;
	imageStore(u_CubeMap, ivec3(texCoord, face), vec4(prefilteredColor, 1.0f));
}