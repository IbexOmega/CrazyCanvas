#version 460
#extension GL_GOOGLE_include_directive : enable

#define NO_BUFFERS

#include "../Defines.glsl"
#include "../Helpers.glsl"
#include "../Reflections.glsl"

layout (local_size_x_id = 0, local_size_y_id = 1, local_size_z = 1) in;

layout(binding = 0,	set = TEXTURE_SET_INDEX) uniform sampler2D u_BlurSrc;
layout(binding = 1, set = TEXTURE_SET_INDEX) uniform sampler2D u_GBufferAORoughMetalValid;
layout(binding = 2, set = TEXTURE_SET_INDEX) uniform sampler2D u_GBufferCompactNormal;
layout(binding = 3,	set = TEXTURE_SET_INDEX, rgba8) restrict uniform image2D u_DenoisedReflections;

layout (constant_id = 2) const float VERTICAL_BLUR_DIRECTION = 0.0f;

#include "../Blur.glsl"

layout(push_constant) uniform RayTracingSettings
{
	int GlossyEnabled;
	int SPP;
	int ShadowsSetting;
} pc_RayTracingSettings;

void main()
{
    ivec2 BLUR_IMAGE_SIZE = imageSize(u_DenoisedReflections);
    int BLUR_IMAGE_TOTAL_NUM_PIXELS = BLUR_IMAGE_SIZE.x * BLUR_IMAGE_SIZE.y;

    if (gl_GlobalInvocationID.x + gl_GlobalInvocationID.y * BLUR_IMAGE_SIZE.x >= BLUR_IMAGE_TOTAL_NUM_PIXELS) 
        return;

    ivec2 p         = ivec2(gl_GlobalInvocationID.x, gl_GlobalInvocationID.y);
    vec2 texCoords  = (vec2(p) + 0.5f) / vec2(BLUR_IMAGE_SIZE);

    vec4 center_Radiance_Valid = texelFetch(u_BlurSrc, p, 0);
    float validSample = center_Radiance_Valid.a;
    vec3 filteredColor;

#if GAUSSIAN_FILTER_DENOISING_ENABLED
    if (pc_RayTracingSettings.GlossyEnabled == 1)
    { 
        const vec2 blurDirection = mix(vec2(1.0f, 0.0f), vec2(0.0f, 1.0f), VERTICAL_BLUR_DIRECTION);

        vec4 center_AO_Rough_Metal_Valid = texelFetch(u_GBufferAORoughMetalValid, p, 0);
        vec3 center_Normal = UnpackNormal(texelFetch(u_GBufferCompactNormal, p, 0).xyz);

        float centerRoughness = center_AO_Rough_Metal_Valid.g;

        #if BILATERAL_FILTER_DENOISING_ENABLED

            if (centerRoughness < GAUSSIAN_FILTER_LEVEL_0)
            {
                filteredColor = center_Radiance_Valid.rgb;
            }
            else if (centerRoughness < GAUSSIAN_FILTER_LEVEL_1)
            {
                filteredColor = bilateralBlur5(center_Radiance_Valid, center_Normal, centerRoughness, u_BlurSrc, u_GBufferAORoughMetalValid, u_GBufferCompactNormal, texCoords, BLUR_IMAGE_SIZE, blurDirection).rgb;
            }
            else if (centerRoughness < GAUSSIAN_FILTER_LEVEL_2)
            {
                filteredColor = bilateralBlur9(center_Radiance_Valid, center_Normal, centerRoughness, u_BlurSrc, u_GBufferAORoughMetalValid, u_GBufferCompactNormal, texCoords, BLUR_IMAGE_SIZE, blurDirection).rgb;
            }
            else
            {
                filteredColor = bilateralBlur13(center_Radiance_Valid, center_Normal, centerRoughness, u_BlurSrc, u_GBufferAORoughMetalValid, u_GBufferCompactNormal, texCoords, BLUR_IMAGE_SIZE, blurDirection).rgb;
            }
            
        #else
            
            if (centerRoughness < GAUSSIAN_FILTER_LEVEL_0)
            {
                filteredColor = center_Radiance_Valid.rgb;
            }
            else if (centerRoughness < GAUSSIAN_FILTER_LEVEL_1)
            {
                filteredColor = blur5(center_Radiance_Valid, u_BlurSrc, texCoords, BLUR_IMAGE_SIZE, blurDirection).rgb;
            }
            else if (centerRoughness < GAUSSIAN_FILTER_LEVEL_2)
            {
                filteredColor = blur9(center_Radiance_Valid, u_BlurSrc, texCoords, BLUR_IMAGE_SIZE, blurDirection).rgb;
            }
            else
            {
                filteredColor = blur13(center_Radiance_Valid, u_BlurSrc, texCoords, BLUR_IMAGE_SIZE, blurDirection).rgb;
            }

        #endif
    }
    else
    {
        filteredColor = center_Radiance_Valid.rgb;
    }
#else
    filteredColor = center_Radiance_Valid.rgb;
#endif

    imageStore(u_DenoisedReflections, p, vec4(filteredColor, validSample));
}