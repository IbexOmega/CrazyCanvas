#version 460
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_ray_tracing : enable
//#extension GL_EXT_debug_printf : enable

#include "../Helpers.glsl"
#include "../Defines.glsl"

struct SPrimaryPayload
{
	float Distance;
};

layout(binding = 0,     set = BUFFER_SET_INDEX) uniform PerFrameBuffer              { SPerFrameBuffer val; }    u_PerFrameBuffer;
layout(binding = 1,     set = BUFFER_SET_INDEX) uniform accelerationStructureEXT                                u_TLAS;

layout(binding = 0,    set = TEXTURE_SET_INDEX, rgba8) restrict uniform image2D u_OutputTexture;

layout(location = 0) rayPayloadEXT SPrimaryPayload s_PrimaryPayload;

void GenerateCameraRay(in vec2 d, out vec3 origin, out vec3 direction)
{
    SPerFrameBuffer perFrameBuffer = u_PerFrameBuffer.val;
    origin      = (perFrameBuffer.ViewInv * vec4(0.0f, 0.0f, 0.0f, 1.0f)).xyz;
    vec4 target = perFrameBuffer.ProjectionInv * vec4(d.x, d.y, 1.0f, 1.0f);
    direction   = (perFrameBuffer.ViewInv * vec4(normalize(target.xyz), 0.0f)).xyz;
}

void main()
{
    //Calculate Screen Coords
	const ivec2 pixelCoords = ivec2(gl_LaunchIDEXT.xy);
	const vec2 pixelCenter  = vec2(pixelCoords) + vec2(0.5f);
	vec2 screenTexCoord     = (pixelCenter / vec2(gl_LaunchSizeEXT.xy));
	vec2 d                  = screenTexCoord * 2.0f - 1.0f;

    //Define Shadow Ray Parameters
    vec3 origin;// = vec3(0.0f, 2.0f, 0.0f);
    vec3 direction;
    GenerateCameraRay(d, origin, direction);

    const uint 		rayFlags           	= gl_RayFlagsOpaqueEXT/* | gl_RayFlagsTerminateOnFirstHitEXT*/;
    const uint 		cullMask           	= 0xFF;
    const uint 		sbtRecordOffset    	= 0;
    const uint 		sbtRecordStride    	= 0;
    const uint 		missIndex          	= 0;
    const float 	Tmin              	= 0.001f;
    const float 	Tmax              	= 10000.0f;
    const int 		payload       		= 0;

    //Send Ray
    traceRayEXT(u_TLAS, rayFlags, cullMask, sbtRecordOffset, sbtRecordStride, missIndex, origin, Tmin, direction, Tmax, payload);

    imageStore(u_OutputTexture, pixelCoords, vec4(vec3(s_PrimaryPayload.Distance), 1.0f));
}