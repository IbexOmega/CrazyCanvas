#version 460
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_EXT_shader_explicit_arithmetic_types : enable

#include "../Defines.glsl"
#include "../Helpers.glsl"

#define WORK_GROUP_INVOCATIONS 32
layout(local_size_x = WORK_GROUP_INVOCATIONS, local_size_y = 1, local_size_z = 1) in;

// Pushconstants
layout(push_constant) uniform PushConstants
{
	float   DeltaTime;
    uint    ParticleCount; 
} u_PC;

// Buffers
layout (binding = 0, set = 0) uniform PerFrameBuffer
{
	SPerFrameBuffer PerFrameBuffer;
} u_PerFrameBuffer;

layout(binding = 1, set = 0) restrict buffer ParticleInstances
{ 
	SParticle Val[]; 
} b_ParticleInstances;

layout(binding = 2, set = 0) readonly restrict buffer EmitterInstances
{ 
	SEmitter Val[]; 
} b_EmitterInstances;

layout(binding = 3, set = 0) readonly restrict buffer EmitterTransforms
{ 
	mat4 Val[]; 
} b_EmitterTransforms;

layout (binding = 4, set = 0) readonly restrict buffer ParticleIndirectIndices
{
	SParticleIndexData Val[];
} b_ParticleIndirectIndices;

layout (binding = 5, set = 0) readonly restrict buffer AliveIndices
{
	uint Val[];
} b_AliveIndices;

layout (binding = 6, set = 0) readonly restrict buffer AccelerationStructureInstanceIndex
{
	uint Val[];
} b_ASInstanceIndex;

layout (binding = 7, set = 0) restrict buffer AccelerationStructureInstance
{
	SAccelerationStructureInstance Val[];
} b_ASInstance;

void UpdateParticleTransform(vec3 position, SEmitter emitter, uint particleIndex, inout SParticle particle, inout SAccelerationStructureInstance ASInstance)
{
	particle.Transform[3].xyz = position;
	
	float scale = mix(particle.EndRadius, particle.BeginRadius, particle.CurrentLife / emitter.LifeTime);
	ASInstance.Transform[0].x = scale;
	ASInstance.Transform[1].y = scale;
	ASInstance.Transform[2].z = scale;

	float radi = PI_OVER_TWO * float(particleIndex % 2);
	mat3 RotationMatrix = mat3
	(
		cos(radi), 	0.0f, -sin(radi),
		0.0f,				1.0f, 0.0f,
		sin(radi), 	0.0f, cos(radi)
	);

	ASInstance.Transform *= RotationMatrix;

	ASInstance.Transform[0].w = position.x;
	ASInstance.Transform[1].w = position.y;
	ASInstance.Transform[2].w = position.z;
}

// Main
void main()
{
	// Return in case this thread is outside of our ParticleCount
	uint totalInvocations = gl_NumWorkGroups.x * gl_WorkGroupSize.x;
	uint indexOffset = gl_GlobalInvocationID.x;
	SPerFrameBuffer frameBuffer = u_PerFrameBuffer.PerFrameBuffer;
	const float dt = u_PC.DeltaTime;
	const vec3 GLOBAL_DOWN = vec3(0.f, 1.f, 0.f);

	while (indexOffset < u_PC.ParticleCount)
	{
		// Update particle data
		uint particleIndex = b_AliveIndices.Val[indexOffset];
		SParticle particle = b_ParticleInstances.Val[particleIndex];
		
		// Retreive emitter data
		uint emmiterIndex = b_ParticleIndirectIndices.Val[particleIndex].EmitterIndex;
		SEmitter emitter = b_EmitterInstances.Val[emmiterIndex];
		mat4 emitterTransform = b_EmitterTransforms.Val[emmiterIndex];
		
		// Retreive AS instance 
		uint ASIndirectIndex = b_ParticleIndirectIndices.Val[particleIndex].ASInstanceIndirectIndex;
		uint ASDirectIndex = b_ASInstanceIndex.Val[ASIndirectIndex];
		SAccelerationStructureInstance ASInstance = b_ASInstance.Val[ASDirectIndex];

		if(particle.WasCreated)
		{
			particle.WasCreated = false;
			vec3 particlePosition = emitterTransform[3].xyz + particle.StartPosition;
			
			UpdateParticleTransform(particlePosition, emitter, particleIndex, particle, ASInstance);

			// Rotate the initial acceleration and velocity to match its emitter's.
			particle.Velocity = (emitterTransform*vec4(particle.StartVelocity, 0.f)).xyz;
			particle.Acceleration = (emitterTransform*vec4(particle.StartAcceleration, 0.f)).xyz;
		}

		particle.Velocity += (particle.Acceleration + GLOBAL_DOWN*emitter.Gravity) * dt;

        // If we will skip to bounce the particles, this should not be named Bounciness. If not, this should be removed.
		if(particle.Bounciness > 1.5f)
		{
			particle.Velocity = vec3(0.f);
		}

		UpdateParticleTransform(particle.Transform[3].xyz + particle.Velocity*dt, emitter, particleIndex, particle, ASInstance);
		particle.CurrentLife -= dt;

		// If the particle is not visible, put it outside the view of the players.
		if(particle.CurrentLife > emitter.LifeTime)
		{
			const float OUT_OF_REACH = 10000.f;
			UpdateParticleTransform(vec3(OUT_OF_REACH), emitter, particleIndex, particle, ASInstance);

			particle.WasCreated = true;
		}

		// Should only happen if it is an emitter that repeats.
		if(!emitter.OneTime && particle.CurrentLife < 0.f)
		{
			float extraLife = mod(abs(particle.CurrentLife), emitter.LifeTime);
			particle.CurrentLife = emitter.LifeTime-extraLife;
			UpdateParticleTransform(particle.StartPosition + emitterTransform[3].xyz, emitter, particleIndex, particle, ASInstance);
			particle.Velocity = particle.StartVelocity;
			particle.Velocity = (emitterTransform*vec4(particle.StartVelocity, 0.f)).xyz;
			particle.Acceleration = (emitterTransform*vec4(particle.StartAcceleration, 0.f)).xyz;
			particle.TileIndex = emitter.FirstAnimationIndex;
		}

		float t = clamp(particle.CurrentLife, 0.f, emitter.LifeTime)/emitter.LifeTime;
		particle.TileIndex = emitter.FirstAnimationIndex + emitter.AnimationCount-1 - clamp(uint(t*emitter.AnimationCount), 0, emitter.AnimationCount-1);

		// Update ASInstance data and write particleIndex to customIndex
		ASInstance.HitMask_CustomProperties = ((particleIndex << 8) >> 8) | ((ASInstance.HitMask_CustomProperties >> 24) << 24);
		b_ASInstance.Val[ASDirectIndex] = ASInstance;
	
		b_ParticleInstances.Val[particleIndex] = particle;
		indexOffset += totalInvocations;
	}

}