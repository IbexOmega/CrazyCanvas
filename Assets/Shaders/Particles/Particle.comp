#version 460
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_shader_explicit_arithmetic_types : enable

#include "../Defines.glsl"

#define WORK_GROUP_INVOCATIONS 32
layout(local_size_x = WORK_GROUP_INVOCATIONS, local_size_y = 1, local_size_z = 1) in;

// Pushconstants
layout(push_constant) uniform PushConstants
{
	float   DeltaTime;
    uint    ParticleCount; 
} u_PC;

// Buffers
layout(binding = 0, set = BUFFER_SET_INDEX) restrict buffer ParticleInstances
{ 
	SParticle Val[]; 
} b_ParticleInstances;

// Main
void main()
{
	// Return in case this thread is outside of our ParticleCount
	uint totalInvocations = gl_NumWorkGroups.x * gl_WorkGroupSize.x;
	uint indexOffset = gl_GlobalInvocationID.x;
	const float dt = u_PC.DeltaTime;

	while (indexOffset < u_PC.ParticleCount){

		// Update particle data 
		SParticle particle = b_ParticleInstances.Val[indexOffset];
		particle.Velocity += particle.Acceleration*dt;
		particle.Transform[3].xyz += particle.Velocity*dt;
		particle.CurrentLife -= dt;

		// Should only happen if it is an emitter that repeats.
		if(particle.CurrentLife < 0.f)
		{
			particle.CurrentLife = particle.LifeTime;
			particle.Transform[3].xyz = particle.StartPosition;
			particle.Velocity = particle.StartVelocity;
		}

		b_ParticleInstances.Val[indexOffset] = particle;
		indexOffset += totalInvocations;
	}

}