#version 460
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_shader_explicit_arithmetic_types : enable

#include "../Defines.glsl"

#define WORK_GROUP_INVOCATIONS 32
layout(local_size_x = WORK_GROUP_INVOCATIONS, local_size_y = 1, local_size_z = 1) in;

// Pushconstants
layout(push_constant) uniform PushConstants
{
    uint    ParticleCount; 
} u_PC;

// Buffers
layout (binding = 0, set = BUFFER_SET_INDEX) uniform PerFrameBuffer
{
	SPerFrameBuffer perFrameBuffer;
} u_PerFrameBuffer;

layout(binding = 1, set = BUFFER_SET_INDEX) restrict buffer ParticleInstancesIn
{ 
	SParticle Val[]; 
} b_ParticlesIn;

layout(binding = 2, set = BUFFER_SET_INDEX) restrict buffer ParticleInstancesOut
{ 
	SParticle Val[]; 
} b_ParticlesOut;

// Main
void main()
{
	// Return in case this thread is outside of our ParticleCount
	uint totalInvocations = gl_NumWorkGroups.x * gl_WorkGroupSize.x;
	uint indexOffset = gl_GlobalInvocationID.x;

    SPerFrameBuffer perFrameBuffer = u_PerFrameBuffer.perFrameBuffer;
    vec3 camDirWorldSpace = normalize(vec3(frameBuffer.View[0][2], frameBuffer.View[1][2], frameBuffer.View[2][2]));
    vec3 camPos = perFrameBuffer.CameraPosition;

	while (indexOffset < u_PC.ParticleCount){

		SParticle particle = b_ParticlesIn.Val[indexOffset];
		vec3 position = particle.Transform[3].xyz;
        vec3 camToParticle = position - camPos;
        float depth = dot(camToParticle, camDirWorldSpace);

		b_ParticlesOut.Val[indexOffset] = particle;
		indexOffset += totalInvocations;
	}

}